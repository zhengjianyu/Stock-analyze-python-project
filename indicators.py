#  Jianyu Zheng 33062456.  ICS 32 Lab sec 5.  Lab asst 3.class simple_moving_average:    '''contain the functions of simple moving average indicators'''    def __init__(self, data_list: list, N: int):        '''initialize'''        self._data = data_list        self._range = N        def cal(self):        '''takes a list and a number and returns a list of its simple moving average'''        result = []        for a in range(self._range - 1):            result.append('')        for i in range(len(self._data) - self._range + 1):            average = 0            for b in range(self._range):                average += float(self._data[i + b].split(',')[4])            aver = '%.2f' % (average/self._range)            result.append(aver)##        print(result)        return result    class directional:    '''contain the functions of directional indicators'''    def __init__(self, data_list, N: int):        '''initialize'''        result = [0]        for i in range(1, len(data_list)):            if data_list[i].split(',')[4] > data_list[i - 1].split(',')[4]:                result.append(1)            elif data_list[i].split(',')[4] < data_list[i - 1].split(',')[4]:                result.append(-1)            else:                result.append(0)        self._change = result        self._range = N    def cal(self):        '''takes a list of change of prices and a number of range, returns a list of directional indicator'''        result = []        for i in range(self._range):            sum = 0            for a in range(i + 1):                sum += self._change[a]            result.append(sum)        for b in range(self._range, len(self._change)):            count = 0            for c in range(self._range):                count += self._change[b - c]            result.append(count)        return result